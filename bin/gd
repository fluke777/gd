#!/usr/bin/env ruby
# 1.9 adds realpath to resolve symlinks; 1.8 doesn't
# have this method, so we add it so we get resolved symlinks
# and compatibility
unless File.respond_to? :realpath
  class File #:nodoc:
    def self.realpath path
      return realpath(File.readlink(path)) if symlink?(path)
      path
    end
  end
end
$: << File.expand_path(File.dirname(File.realpath(__FILE__)) + '/../lib')
require 'rubygems'
require 'gli'
require 'gd_version'
require 'gd'
require 'fileutils'

include GLI

program_desc 'GoodData CLI -> experimental - when it is reasonably complete it will be merged with gooddata Gem'

version Gd::VERSION

desc 'Project pid where you want to work'
default_value nil
arg_name 'pid'
flag [:i,:pid]

desc 'User name'
default_value nil
arg_name 'user'
flag [:u,:user]

desc 'Password'
default_value nil
arg_name 'password'
flag [:p,:password]

desc 'Enable http logger to STDOUT'
default_value false
arg_name 'logger'
switch [:l, :logger]


desc 'Compute a report'
command :compute_report do |c|
  c.desc 'Computes a report and prints it to STDOUT'

  c.action do |global_options,options,args|
    puts args[0]
    result = Gd::Commands.compute_report(args[0])
    result.print
  end
end


desc 'Enable a user in a project. This user needs to be a member of a domain.'
command :enable do |c|
  c.desc 'User email to be invited.'
  c.flag [:e, :email]

  c.desc 'Domain where user resides.'
  c.flag [:d, :domain]

  c.action do |global_options,options,args|
    email = options[:email]
    pid = global_options[:pid]
    domain = options[:domain]

    fail "Please specify user email" if email.nil? || email.empty?
    fail "Please specify domain" if domain.nil? || domain.empty?

    users = Gd::Commands.get_domain_users(domain)
    user = users.find {|u| u[:login] == email}

    fail "User #{email} was not found in the domain #{domain}" if user.nil?

    user_uri = user[:uri]

    Gd::Commands.set_user_status(user_uri, pid, "ENABLED")

  end
end


desc 'Validate a project'
command :validate do |c|
  c.desc 'Prints the error messages on the console'
  c.switch [:v, :verbose]

  c.action do |global_options,options,args|
    verbose = options[:verbose]
    
    result, description = Gd::Commands.validate_project(global_options[:pid])
    if verbose
      pp description
      if result
        puts "PASS".color :green
      else
        puts "FAIL".color :red
      end
    end
    
    exit 1 unless result
  end
end

desc 'List users in project'
arg_name 'This command will output the list of users to the standard output. It prints login, first name, last name and status.'
command :list_users do |c|
  c.action do |global_options,options,args|
    if !global_options[:pid]
      fail "You need to provide a project id. Use -i pid"
    end
    
    roles = roles = Gd::Commands.get_roles(global_options[:pid])
    
    users = Gd::Commands.get_users(global_options[:pid])
    users.each do |u|
      role_name = nil
      roles.find {|k,v| role_name = k if v[:uri] == u[:role]}
      puts "#{u[:login]},#{u[:uri]},#{u[:first_name]},#{u[:last_name]},#{role_name},#{u[:status]}"
    end
  end
end


desc 'List roles in project'
arg_name 'This command will output the list of roles in a project.'
command :list_roles do |c|
  c.action do |global_options,options,args|
    if !global_options[:pid]
      fail "You need to provide a project id. Use -i pid"
    end
    roles = Gd::Commands.get_roles(global_options[:pid])
    roles.each {|k,v| puts k}
  end
end

desc 'List users in domain'
command :list_domain_users do |c|
  c.desc 'Domain from which the users should be printed'
  c.flag [:d, :domain]

  c.action do |global_options,options,args|
    fail "Domain not specified. Use -d domain_name" unless options[:domain]
    Gd::Commands.get_domain_users(options[:domain]).each do |u|
      puts "#{u[:login]},#{u[:uri]},#{u[:first_name]},#{u[:last_name]}"
    end
  end
end

desc 'Create project'
arg_name 'Create a project'
command :create_project do |c|
  c.action do |global_options,options,args|
    title = args.first
    Gd::Commands.create_project(title)
  end
end

desc 'Clone project'
arg_name 'Clones a project'
command :clone_project do |c|
  
  c.desc 'Project will be cloned with users'
  c.switch [:u, "with-users"]
  
  c.desc 'Project will be cloned with users'
  c.switch [:d, "with-data"]
  
  c.action do |global_options,options,args|
    Gd::Commands.clone_project(global_options[:pid], {
      :with_data => options[:d],
      :with_users => options[:u]
    })
  end
end

desc 'List stored projects'
arg_name 'List the projects you got stashed in a stash'
skips_pre
command :project_stash do |c|

  c.action do |global_options,options,args|
    config = Gd::Commands.load_config
    projects = config["projects"]
    projects.each {|u| puts u['default'] ? "* #{u["title"]},#{u["pid"]}" : "  #{u["title"]} #{u["pid"]}"}
  end
end

desc 'Add stored project'
arg_name 'name project_id'
skips_pre
command :project_stash_add do |c|

  c.action do |global_options,options,args|
    project_title   = args[0] || ask("Project Title?")
    project_id      = args[1] || ask("Project Id?")
    
    config = Gd::Commands.load_config
    projects = config["projects"]
    projects << {
      :pid => project_id,
      :title => project_title,
      :default => false
    }
    Gd::Commands.save_config(config)
  end
end

desc 'Remove stored project'
arg_name 'name'
skips_pre
command :project_stash_remove do |c|

  c.action do |global_options,options,args|
    project_title   = args[0] || ask("Project?")
    config = Gd::Commands.load_config
    config["projects"] = config["projects"].reject {|p| p["title"] == project_title}
    Gd::Commands.save_config(config)
  end
end



desc 'Change default stored project'
arg_name 'List the projects you got stashed in a stash'
skips_pre
command :project_stash_default do |c|

  c.action do |global_options,options,args|
    title = args.first
    config = Gd::Commands.load_config
    projects = config["projects"]
    projects.each {|u| u['default'] = title == u["title"] }
    Gd::Commands.save_config(config)
  end

end

desc 'List stored users'
arg_name 'List the users you got stashed in a stash'
skips_pre
command :user_stash do |c|

  c.action do |global_options,options,args|
    config = Gd::Commands.load_config
    users = config["users"]
    users.each {|u| puts u['default'] ? "* #{u["login"]}" : "  #{u["login"]}"}
  end
end


desc 'Add stored user'
arg_name 'login password'
skips_pre
command :user_stash_add do |c|

  c.action do |global_options,options,args|
    login     = args[0] || ask("Login?")
    password  = args[1] || ask("Password?")
    
    config = Gd::Commands.load_config
    users = config["users"]
    users << {
      :login => login,
      :password => password,
      :default => false
    }
    Gd::Commands.save_config(config)
  end
end

desc 'Remove stored user'
arg_name 'login'
skips_pre
command :user_stash_remove do |c|

  c.action do |global_options,options,args|
    login   = args[0] || ask("Login?")
    config = Gd::Commands.load_config
    config["users"] = config["users"].reject {|p| p["login"] == login}
    Gd::Commands.save_config(config)
  end
end

desc 'Change default stored user'
arg_name 'List the users you got stashed in a stash'
skips_pre
command :user_stash_default do |c|

  c.action do |global_options,options,args|
    name = args.first
    config = Gd::Commands.load_config
    users = config["users"]
    users.each {|u| u['default'] = name == u["login"] }
    Gd::Commands.save_config(config)
  end
end

desc 'Delete user from a domain. Use only if you know what you are doing.'
arg_name 'email'
command :delete_user do |c|
  c.desc 'Domain from which the user should be deleted'
  c.flag [:d, :domain]

  c.action do |global_options,options,args|
    email = args.first 
    fail "Domain not specified. Use -d domain_name" unless options[:domain]
    user_to_delete = Gd::Commands.get_domain_users(options[:domain]).find {|u| u[:login] == email}
    Gd::Commands.delete_user(user_to_delete[:uri])
  end
end

desc 'Sync users from SF in the project'
command :sync_users_with_sf do |c|

  c.desc 'SF login'
  c.flag [:l, :login]
  default_value nil

  c.desc 'SF password'
  c.flag [:p, :password]

  c.desc 'Blaclist of users. These users will not be touched during synchronization. Can be a comma separated values.'
  c.flag [:b, :blacklist]

  c.desc 'Domain in which the users should be created'
  c.flag [:d, :domain]

  c.action do |global_options,options,args|
    pid = global_options[:pid]
    login = options[:login]
    pass  = options[:password]
    domain = options[:domain]

    fail "Please specify login" if login.nil? || login.empty?
    fail "Please specify password" if pass.nil? || pass.empty?
    fail "Please specify domain" if domain.nil? || domain.empty?

    Gd::Commands.sync_users_in_project_from_sf(login, pass, pid, domain, {
      :black_list => options[:black_list].split(',').map {|item| item.strip}
    })
  end
end

desc 'Sync users from CSV in the project'
command :sync_users_with_csv do |c|

  c.desc 'Input filename'
  c.flag [:i, :input]
  default_value nil

  c.desc 'Domain in which the users should be created'
  c.flag [:d, :domain]

  c.desc 'Blaclist of users. These users will not be touched during synchronization. Can be a comma separated values.'
  c.flag [:b, :blacklist]

  c.action do |global_options,options,args|
    pid = global_options[:pid]
    file_name = options[:input]
    domain = options[:domain]

    fail "Please specify file name with input data" if file_name.nil? || pass.empty?
    fail "File #{file_name} does not exist" unless File.exist?(file_name)
    fail "Please specify domain" if domain.nil? || domain.empty?

    Gd::Commands.sync_users_in_project_from_csv(file_name, pid, domain, {
      :black_list => options[:black_list].split(',').map {|item| item.strip}
    })
  end
end

desc 'Run reports'
command :run_reports do |c|

  c.desc 'Output directory'
  c.flag [:d, :directory]
  default_value nil
  
  c.desc 'Output directory'
  c.switch [:v, :verbose]
  
  c.action do |global_options,options,args|
    dir = options[:directory] || '.'
    absolute_path = File.expand_path(dir)
    FileUtils::mkdir_p absolute_path
    FileUtils::cd absolute_path do
      query = GoodData::Report[:all]
      query.each do |item|
        report = GoodData::Report[item["link"]]
        result = report.execute
        File.open("#{absolute_path}/#{report.obj_id}", 'w') do |f|
          f << result.to_s
        end
      end
    end
  end
end

desc 'Sync domain with CSV'
command :sync_domain_with_csv do |c|

  c.desc "File where the CSV data resides. The csv is expected to have headers login, password, first_name, last_name, sso_provider. The order is arbitrary the values will be picked up based on header names. Optionally you can provide a role field."
  c.flag [:i, :input]

  c.desc 'Domain in which the users should be created'
  c.flag [:d, :domain]

  c.action do |global_options,options,args|

    pid = global_options[:pid]
    domain = options[:domain]
    filename = options[:input]

    fail "Please specify domain" if domain.nil? || domain.empty?
    fail "Please specify input file name" if filename.nil? || filename.empty?
    fail "Input filename #{filename} does not exist" unless File.exist?(filename)

    Gd::Commands::create_users_from_csv(filename, pid, domain)

  end
end


desc 'Sync domain with SF'
command :sync_domain_with_sf do |c|

  c.desc 'SF login'
  c.flag [:l, :login]
  default_value nil

  c.desc 'SF password'
  c.flag [:p, :password]

  c.desc 'Blaclist of users. These users will not be touched during synchronization. Can be a comma separated values.'
  c.flag [:b, :blacklist]

  c.desc 'Domain in which the users should be created'
  c.flag [:d, :domain]

  c.action do |global_options,options,args|

    pid = global_options[:pid]
    login = options[:login]
    pass  = options[:password]
    domain = options[:domain]

    fail "Please specify login" if login.nil? || login.empty?
    fail "Please specify password" if pass.nil? || pass.empty?
    fail "Please specify domain" if domain.nil? || domain.empty?

    Gd::Commands::create_users_from_sf(login, pass, pid, domain)

  end
end

desc 'Set a role to a user'
command :set_role do |c|

  c.action do |global_options,options,args|
    email = args[0]
    role  = args[1]
    
    fail "Please specify email" if email.nil?
    fail "Please specify role" if role.nil?
    
    pid = global_options[:pid]
    roles = Gd::Commands.get_roles(pid)
    role_uri = roles[role]
    
    fail "No such role #{role} in project #{pid}. Use \"gd list_roles\" to get list of roles in the project." if role_uri.nil?
    
    users = Gd::Commands.get_users(global_options[:pid])
    user_uri = users.find {|u| u[:login] == email}
    
    Gd::Commands.set_role(role_uri[:user_uri], user_uri[:uri])
    
  end
end

desc 'Delete all mandatory user filters from a project'
command :delete_all_mufs do |c|

  c.action do |global_options,options,args|
    
    pid = global_options[:pid]
    
    Gd::Commands.delete_all_mufs(pid)
    
  end
end

pre do |global_options,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abourt and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  
  
  if command
    config = Gd::Commands.load_config
    users = config["users"]
    projects = config["projects"]
    default_user = users.find {|u| u["default"]} if !global_options[:user]
    default_user = users.find {|u| u["login"] == global_options[:user]} if global_options[:user] && !global_options[:password]

    default_project = projects.find {|p| p["default"]}

    GoodData.logger = Logger.new(STDOUT) if global_options[:logger]

    GoodData.connect global_options[:user] || default_user["login"], global_options[:password] || default_user["password"], nil, :timeout => 0
    if global_options[:pid].nil?
      global_options[:pid] = default_project["pid"] if default_project
    end
    GoodData.use global_options[:pid] unless global_options[:pid].nil?
  end
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # pp exception.backtrace
  # puts "error"
  # Error logic here
  # return false to skip default error handling
  true
end

exit GLI.run(ARGV)